/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    // mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'

    implementation project(':core')
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'ch.qos.logback:logback-classic:1.2.11'
}

application {
    mainClass = 'son.pc.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.register('build_jar', Jar) {
    dependsOn ':forPC:jar', ':core:jar' // Ensuring the core and forPC JAR tasks are executed first

    // Include compiled classes from forPC and core modules
    from project(':forPC').sourceSets.main.output
    from project(':core').sourceSets.main.output

    // Add all runtime dependencies into the JAR
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    // Specify the main class for the executable JAR
    manifest {
        attributes(
            'Main-Class': 'son.pc.App'  // Make sure this is the fully qualified name of your main class
        )
    }

    // Customize the JAR file name and output directory
    archiveFileName = 'son.jar' // Your custom JAR name
    destinationDirectory.set(file('build'))  // Save it to the libs folder, or customize as needed
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE // This will exclude duplicates
}